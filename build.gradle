plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'

	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'

	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.verby'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'io.rest-assured:rest-assured:5.4.0'
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.2.2'

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	implementation 'com.github.maricn:logback-slack-appender:1.6.1'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

// RestDocs
ext {
	snippetsDir = file("build/generated-snippets")
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

// Jacoco
def jacocoDir = layout.buildDirectory.dir("reports/")

jacoco {
	toolVersion = "0.8.9"
}

def jacocoExcludePatterns = [
		"**/*Application*",
		"**/*Config*",
		"**/*Exception*",
		"**/*Request*",
		"**/*Response*",
		"**/*Interceptor*",
		"**/*Filter*",
		"**/*Resolver*",
		"**/resources/**",
		"**/exception/**",
		"**/config/**",
		"**/aspect/**",
]

def excludedClassFilesForReport(classDirectories, jacocoExcludePatterns) {
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: jacocoExcludePatterns)
	}))
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required.set(true)
		xml.required.set(true)

		html.destination jacocoDir.get().file("jacoco/index.html").asFile
		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
	}

	afterEvaluate {
		excludedClassFilesForReport(classDirectories, jacocoExcludePatterns)
	}

	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	excludedClassFilesForReport(classDirectories, jacocoExcludePatterns)
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}
		}
	}
}

// SonarCloud
sonar {
	properties {
		property "sonar.projectKey", "team-verby_indp-server"
		property "sonar.organization", "team-verby"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", jacocoExcludePatterns.join(",")
	}
}
